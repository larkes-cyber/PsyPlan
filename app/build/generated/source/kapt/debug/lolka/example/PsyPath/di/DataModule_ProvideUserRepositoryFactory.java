// Generated by Dagger (https://dagger.dev).
package lolka.example.PsyPath.di;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import lolka.example.PsyPath.data.retrofit.repository.RetrofitRepository;
import lolka.example.PsyPath.data.storage.Service;
import lolka.example.PsyPath.domain.repository.UserRepository;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DataModule_ProvideUserRepositoryFactory implements Factory<UserRepository> {
  private final DataModule module;

  private final Provider<Service> serviceProvider;

  private final Provider<RetrofitRepository> retrofitRepositoryProvider;

  public DataModule_ProvideUserRepositoryFactory(DataModule module,
      Provider<Service> serviceProvider, Provider<RetrofitRepository> retrofitRepositoryProvider) {
    this.module = module;
    this.serviceProvider = serviceProvider;
    this.retrofitRepositoryProvider = retrofitRepositoryProvider;
  }

  @Override
  public UserRepository get() {
    return provideUserRepository(module, serviceProvider.get(), retrofitRepositoryProvider.get());
  }

  public static DataModule_ProvideUserRepositoryFactory create(DataModule module,
      Provider<Service> serviceProvider, Provider<RetrofitRepository> retrofitRepositoryProvider) {
    return new DataModule_ProvideUserRepositoryFactory(module, serviceProvider, retrofitRepositoryProvider);
  }

  public static UserRepository provideUserRepository(DataModule instance, Service service,
      RetrofitRepository retrofitRepository) {
    return Preconditions.checkNotNullFromProvides(instance.provideUserRepository(service, retrofitRepository));
  }
}
