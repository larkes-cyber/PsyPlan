// Generated by Dagger (https://dagger.dev).
package lolka.example.PsyPath.di;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import lolka.example.PsyPath.domain.repository.UserRepository;
import lolka.example.PsyPath.domain.usecase.UseSaveSession;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DomainModule_ProvideSaveSessionFactory implements Factory<UseSaveSession> {
  private final DomainModule module;

  private final Provider<UserRepository> userRepositoryProvider;

  public DomainModule_ProvideSaveSessionFactory(DomainModule module,
      Provider<UserRepository> userRepositoryProvider) {
    this.module = module;
    this.userRepositoryProvider = userRepositoryProvider;
  }

  @Override
  public UseSaveSession get() {
    return provideSaveSession(module, userRepositoryProvider.get());
  }

  public static DomainModule_ProvideSaveSessionFactory create(DomainModule module,
      Provider<UserRepository> userRepositoryProvider) {
    return new DomainModule_ProvideSaveSessionFactory(module, userRepositoryProvider);
  }

  public static UseSaveSession provideSaveSession(DomainModule instance,
      UserRepository userRepository) {
    return Preconditions.checkNotNullFromProvides(instance.provideSaveSession(userRepository));
  }
}
