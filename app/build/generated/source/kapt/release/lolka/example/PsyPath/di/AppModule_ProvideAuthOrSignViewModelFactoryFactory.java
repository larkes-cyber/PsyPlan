// Generated by Dagger (https://dagger.dev).
package lolka.example.PsyPath.di;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import lolka.example.PsyPath.domain.usecase.UseGetPatientDataFromDatabase;
import lolka.example.PsyPath.presentation.viewmodel.SignOrAuthViewModelFactory;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AppModule_ProvideAuthOrSignViewModelFactoryFactory implements Factory<SignOrAuthViewModelFactory> {
  private final AppModule module;

  private final Provider<UseGetPatientDataFromDatabase> useGetPatientDataFromDatabaseProvider;

  public AppModule_ProvideAuthOrSignViewModelFactoryFactory(AppModule module,
      Provider<UseGetPatientDataFromDatabase> useGetPatientDataFromDatabaseProvider) {
    this.module = module;
    this.useGetPatientDataFromDatabaseProvider = useGetPatientDataFromDatabaseProvider;
  }

  @Override
  public SignOrAuthViewModelFactory get() {
    return provideAuthOrSignViewModelFactory(module, useGetPatientDataFromDatabaseProvider.get());
  }

  public static AppModule_ProvideAuthOrSignViewModelFactoryFactory create(AppModule module,
      Provider<UseGetPatientDataFromDatabase> useGetPatientDataFromDatabaseProvider) {
    return new AppModule_ProvideAuthOrSignViewModelFactoryFactory(module, useGetPatientDataFromDatabaseProvider);
  }

  public static SignOrAuthViewModelFactory provideAuthOrSignViewModelFactory(AppModule instance,
      UseGetPatientDataFromDatabase useGetPatientDataFromDatabase) {
    return Preconditions.checkNotNullFromProvides(instance.provideAuthOrSignViewModelFactory(useGetPatientDataFromDatabase));
  }
}
