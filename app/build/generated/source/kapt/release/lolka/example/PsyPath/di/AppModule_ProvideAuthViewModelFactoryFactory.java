// Generated by Dagger (https://dagger.dev).
package lolka.example.PsyPath.di;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import lolka.example.PsyPath.domain.usecase.UseInsertPatientDataToDatabase;
import lolka.example.PsyPath.domain.usecase.UsePushPatientDataToServer;
import lolka.example.PsyPath.domain.usecase.UseSaveSession;
import lolka.example.PsyPath.presentation.viewmodel.AuthViewModelFactory;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AppModule_ProvideAuthViewModelFactoryFactory implements Factory<AuthViewModelFactory> {
  private final AppModule module;

  private final Provider<UsePushPatientDataToServer> usePushPatientDataToServerProvider;

  private final Provider<UseInsertPatientDataToDatabase> useInsertPatientDataToDatabaseProvider;

  private final Provider<UseSaveSession> useSaveSessionProvider;

  public AppModule_ProvideAuthViewModelFactoryFactory(AppModule module,
      Provider<UsePushPatientDataToServer> usePushPatientDataToServerProvider,
      Provider<UseInsertPatientDataToDatabase> useInsertPatientDataToDatabaseProvider,
      Provider<UseSaveSession> useSaveSessionProvider) {
    this.module = module;
    this.usePushPatientDataToServerProvider = usePushPatientDataToServerProvider;
    this.useInsertPatientDataToDatabaseProvider = useInsertPatientDataToDatabaseProvider;
    this.useSaveSessionProvider = useSaveSessionProvider;
  }

  @Override
  public AuthViewModelFactory get() {
    return provideAuthViewModelFactory(module, usePushPatientDataToServerProvider.get(), useInsertPatientDataToDatabaseProvider.get(), useSaveSessionProvider.get());
  }

  public static AppModule_ProvideAuthViewModelFactoryFactory create(AppModule module,
      Provider<UsePushPatientDataToServer> usePushPatientDataToServerProvider,
      Provider<UseInsertPatientDataToDatabase> useInsertPatientDataToDatabaseProvider,
      Provider<UseSaveSession> useSaveSessionProvider) {
    return new AppModule_ProvideAuthViewModelFactoryFactory(module, usePushPatientDataToServerProvider, useInsertPatientDataToDatabaseProvider, useSaveSessionProvider);
  }

  public static AuthViewModelFactory provideAuthViewModelFactory(AppModule instance,
      UsePushPatientDataToServer usePushPatientDataToServer,
      UseInsertPatientDataToDatabase useInsertPatientDataToDatabase,
      UseSaveSession useSaveSession) {
    return Preconditions.checkNotNullFromProvides(instance.provideAuthViewModelFactory(usePushPatientDataToServer, useInsertPatientDataToDatabase, useSaveSession));
  }
}
