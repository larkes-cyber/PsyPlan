// Generated by Dagger (https://dagger.dev).
package lolka.example.PsyPath.di;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import lolka.example.PsyPath.domain.usecase.UseGetPatientDataFromDatabase;
import lolka.example.PsyPath.presentation.viewmodel.PatientProfileViewModelFactory;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AppModule_ProvidePatientProfileViewModelFactoryFactory implements Factory<PatientProfileViewModelFactory> {
  private final AppModule module;

  private final Provider<UseGetPatientDataFromDatabase> useGetPatientDataFromDatabaseProvider;

  public AppModule_ProvidePatientProfileViewModelFactoryFactory(AppModule module,
      Provider<UseGetPatientDataFromDatabase> useGetPatientDataFromDatabaseProvider) {
    this.module = module;
    this.useGetPatientDataFromDatabaseProvider = useGetPatientDataFromDatabaseProvider;
  }

  @Override
  public PatientProfileViewModelFactory get() {
    return providePatientProfileViewModelFactory(module, useGetPatientDataFromDatabaseProvider.get());
  }

  public static AppModule_ProvidePatientProfileViewModelFactoryFactory create(AppModule module,
      Provider<UseGetPatientDataFromDatabase> useGetPatientDataFromDatabaseProvider) {
    return new AppModule_ProvidePatientProfileViewModelFactoryFactory(module, useGetPatientDataFromDatabaseProvider);
  }

  public static PatientProfileViewModelFactory providePatientProfileViewModelFactory(
      AppModule instance, UseGetPatientDataFromDatabase useGetPatientDataFromDatabase) {
    return Preconditions.checkNotNullFromProvides(instance.providePatientProfileViewModelFactory(useGetPatientDataFromDatabase));
  }
}
