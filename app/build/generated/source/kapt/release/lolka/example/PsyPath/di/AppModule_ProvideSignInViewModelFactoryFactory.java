// Generated by Dagger (https://dagger.dev).
package lolka.example.PsyPath.di;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import lolka.example.PsyPath.domain.usecase.UseCheckUser;
import lolka.example.PsyPath.presentation.viewmodel.SignInViewModelFactory;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AppModule_ProvideSignInViewModelFactoryFactory implements Factory<SignInViewModelFactory> {
  private final AppModule module;

  private final Provider<UseCheckUser> useCheckUserProvider;

  public AppModule_ProvideSignInViewModelFactoryFactory(AppModule module,
      Provider<UseCheckUser> useCheckUserProvider) {
    this.module = module;
    this.useCheckUserProvider = useCheckUserProvider;
  }

  @Override
  public SignInViewModelFactory get() {
    return provideSignInViewModelFactory(module, useCheckUserProvider.get());
  }

  public static AppModule_ProvideSignInViewModelFactoryFactory create(AppModule module,
      Provider<UseCheckUser> useCheckUserProvider) {
    return new AppModule_ProvideSignInViewModelFactoryFactory(module, useCheckUserProvider);
  }

  public static SignInViewModelFactory provideSignInViewModelFactory(AppModule instance,
      UseCheckUser useCheckUser) {
    return Preconditions.checkNotNullFromProvides(instance.provideSignInViewModelFactory(useCheckUser));
  }
}
