// Generated by Dagger (https://dagger.dev).
package lolka.example.PsyPath.di;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import lolka.example.PsyPath.domain.usecase.UseGetTasksFromDatabase;
import lolka.example.PsyPath.domain.usecase.UseInsertTaskToDatabase;
import lolka.example.PsyPath.presentation.viewmodel.StateViewModelFactory;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AppModule_ProvideStateViewModelFactoryFactory implements Factory<StateViewModelFactory> {
  private final AppModule module;

  private final Provider<UseInsertTaskToDatabase> useInsertTaskToDatabaseProvider;

  private final Provider<UseGetTasksFromDatabase> useGetTasksFromDatabaseProvider;

  public AppModule_ProvideStateViewModelFactoryFactory(AppModule module,
      Provider<UseInsertTaskToDatabase> useInsertTaskToDatabaseProvider,
      Provider<UseGetTasksFromDatabase> useGetTasksFromDatabaseProvider) {
    this.module = module;
    this.useInsertTaskToDatabaseProvider = useInsertTaskToDatabaseProvider;
    this.useGetTasksFromDatabaseProvider = useGetTasksFromDatabaseProvider;
  }

  @Override
  public StateViewModelFactory get() {
    return provideStateViewModelFactory(module, useInsertTaskToDatabaseProvider.get(), useGetTasksFromDatabaseProvider.get());
  }

  public static AppModule_ProvideStateViewModelFactoryFactory create(AppModule module,
      Provider<UseInsertTaskToDatabase> useInsertTaskToDatabaseProvider,
      Provider<UseGetTasksFromDatabase> useGetTasksFromDatabaseProvider) {
    return new AppModule_ProvideStateViewModelFactoryFactory(module, useInsertTaskToDatabaseProvider, useGetTasksFromDatabaseProvider);
  }

  public static StateViewModelFactory provideStateViewModelFactory(AppModule instance,
      UseInsertTaskToDatabase useInsertTaskToDatabase,
      UseGetTasksFromDatabase useGetTasksFromDatabase) {
    return Preconditions.checkNotNullFromProvides(instance.provideStateViewModelFactory(useInsertTaskToDatabase, useGetTasksFromDatabase));
  }
}
