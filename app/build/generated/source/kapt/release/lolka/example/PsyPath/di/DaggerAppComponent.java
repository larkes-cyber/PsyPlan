// Generated by Dagger (https://dagger.dev).
package lolka.example.PsyPath.di;

import dagger.internal.DaggerGenerated;
import dagger.internal.Preconditions;
import lolka.example.PsyPath.data.storage.Service;
import lolka.example.PsyPath.data.storage.database_for_goals.AppDatabase;
import lolka.example.PsyPath.data.storage.database_for_goals.dao.TaskDao;
import lolka.example.PsyPath.data.storage.database_for_goals.repository.DataBaseRepository;
import lolka.example.PsyPath.data.storage.database_for_goals.repository.DataBaseRepository_MembersInjector;
import lolka.example.PsyPath.data.storage.user_data.PatientData;
import lolka.example.PsyPath.domain.repository.UserRepository;
import lolka.example.PsyPath.domain.usecase.UseGetPatientDataFromDatabase;
import lolka.example.PsyPath.domain.usecase.UseGetTasksFromDatabase;
import lolka.example.PsyPath.domain.usecase.UseInsertPatientDataToDatabase;
import lolka.example.PsyPath.domain.usecase.UseInsertTaskToDatabase;
import lolka.example.PsyPath.domain.usecase.UsePushPatientDataToServer;
import lolka.example.PsyPath.presentation.fragment.AuthFragment;
import lolka.example.PsyPath.presentation.fragment.AuthFragment_MembersInjector;
import lolka.example.PsyPath.presentation.fragment.ProfileOfPatientFragment;
import lolka.example.PsyPath.presentation.fragment.ProfileOfPatientFragment_MembersInjector;
import lolka.example.PsyPath.presentation.fragment.SignInOrAuth;
import lolka.example.PsyPath.presentation.fragment.SignInOrAuth_MembersInjector;
import lolka.example.PsyPath.presentation.fragment.StateFragment;
import lolka.example.PsyPath.presentation.fragment.StateFragment_MembersInjector;
import lolka.example.PsyPath.presentation.viewmodel.AuthViewModelFactory;
import lolka.example.PsyPath.presentation.viewmodel.PatientProfileViewModelFactory;
import lolka.example.PsyPath.presentation.viewmodel.SignOrAuthViewModelFactory;
import lolka.example.PsyPath.presentation.viewmodel.StateViewModelFactory;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerAppComponent implements AppComponent {
  private final DataModule dataModule;

  private final AppModule appModule;

  private final DomainModule domainModule;

  private final DaggerAppComponent appComponent = this;

  private DaggerAppComponent(AppModule appModuleParam, DomainModule domainModuleParam,
      DataModule dataModuleParam) {
    this.dataModule = dataModuleParam;
    this.appModule = appModuleParam;
    this.domainModule = domainModuleParam;

  }

  public static Builder builder() {
    return new Builder();
  }

  private AppDatabase appDatabase() {
    return DataModule_ProvideDataBaseFactory.provideDataBase(dataModule, AppModule_ProvideContextFactory.provideContext(appModule));
  }

  private TaskDao taskDao() {
    return DataModule_ProvideTaskDaoFactory.provideTaskDao(dataModule, appDatabase());
  }

  private DataBaseRepository dataBaseRepository() {
    return DataModule_ProvideDataBaseRepositoryFactory.provideDataBaseRepository(dataModule, AppModule_ProvideContextFactory.provideContext(appModule));
  }

  private PatientData patientData() {
    return DataModule_ProvidePatientDataFactory.providePatientData(dataModule, AppModule_ProvideContextFactory.provideContext(appModule));
  }

  private Service service() {
    return DataModule_ProvideServiceFactory.provideService(dataModule, AppModule_ProvideContextFactory.provideContext(appModule), dataBaseRepository(), patientData());
  }

  private UserRepository userRepository() {
    return DataModule_ProvideUserRepositoryFactory.provideUserRepository(dataModule, service(), DataModule_ProvideRetrofitRepositoryFactory.provideRetrofitRepository(dataModule));
  }

  private UsePushPatientDataToServer usePushPatientDataToServer() {
    return DomainModule_ProvideUsePushPatientDataToServerFactory.provideUsePushPatientDataToServer(domainModule, userRepository());
  }

  private UseInsertPatientDataToDatabase useInsertPatientDataToDatabase() {
    return DomainModule_ProvideInsertPatientDataToDatabaseFactory.provideInsertPatientDataToDatabase(domainModule, userRepository());
  }

  private AuthViewModelFactory authViewModelFactory() {
    return AppModule_ProvideAuthViewModelFactoryFactory.provideAuthViewModelFactory(appModule, usePushPatientDataToServer(), useInsertPatientDataToDatabase());
  }

  private UseGetPatientDataFromDatabase useGetPatientDataFromDatabase() {
    return DomainModule_ProvideGetPatientDataFromDatabaseFactory.provideGetPatientDataFromDatabase(domainModule, userRepository());
  }

  private PatientProfileViewModelFactory patientProfileViewModelFactory() {
    return AppModule_ProvidePatientProfileViewModelFactoryFactory.providePatientProfileViewModelFactory(appModule, useGetPatientDataFromDatabase());
  }

  private SignOrAuthViewModelFactory signOrAuthViewModelFactory() {
    return AppModule_ProvideAuthOrSignViewModelFactoryFactory.provideAuthOrSignViewModelFactory(appModule, useGetPatientDataFromDatabase());
  }

  private UseInsertTaskToDatabase useInsertTaskToDatabase() {
    return DomainModule_ProvideInsertTaskToDatabaseFactory.provideInsertTaskToDatabase(domainModule, userRepository());
  }

  private UseGetTasksFromDatabase useGetTasksFromDatabase() {
    return DomainModule_ProvideGetTasksFromDatabaseFactory.provideGetTasksFromDatabase(domainModule, userRepository());
  }

  private StateViewModelFactory stateViewModelFactory() {
    return AppModule_ProvideStateViewModelFactoryFactory.provideStateViewModelFactory(appModule, useInsertTaskToDatabase(), useGetTasksFromDatabase());
  }

  @Override
  public void injectDataBaseRepository(DataBaseRepository dataBaseRepository) {
    injectDataBaseRepository2(dataBaseRepository);
  }

  @Override
  public void injectSomeFragment(AuthFragment authFragment) {
    injectAuthFragment(authFragment);
  }

  @Override
  public void injectPatientProfileFragment(ProfileOfPatientFragment patientFragment) {
    injectProfileOfPatientFragment(patientFragment);
  }

  @Override
  public void injectSignOrAuthFragment(SignInOrAuth signInOrAuth) {
    injectSignInOrAuth(signInOrAuth);
  }

  @Override
  public void injectStateFragment(StateFragment stateFragment) {
    injectStateFragment2(stateFragment);
  }

  private DataBaseRepository injectDataBaseRepository2(DataBaseRepository instance) {
    DataBaseRepository_MembersInjector.injectTaskDao(instance, taskDao());
    return instance;
  }

  private AuthFragment injectAuthFragment(AuthFragment instance) {
    AuthFragment_MembersInjector.injectVmFactory(instance, authViewModelFactory());
    return instance;
  }

  private ProfileOfPatientFragment injectProfileOfPatientFragment(
      ProfileOfPatientFragment instance) {
    ProfileOfPatientFragment_MembersInjector.injectVmFactory(instance, patientProfileViewModelFactory());
    return instance;
  }

  private SignInOrAuth injectSignInOrAuth(SignInOrAuth instance) {
    SignInOrAuth_MembersInjector.injectVmFactory(instance, signOrAuthViewModelFactory());
    return instance;
  }

  private StateFragment injectStateFragment2(StateFragment instance) {
    StateFragment_MembersInjector.injectVmFactory(instance, stateViewModelFactory());
    return instance;
  }

  public static final class Builder {
    private AppModule appModule;

    private DomainModule domainModule;

    private DataModule dataModule;

    private Builder() {
    }

    public Builder appModule(AppModule appModule) {
      this.appModule = Preconditions.checkNotNull(appModule);
      return this;
    }

    public Builder domainModule(DomainModule domainModule) {
      this.domainModule = Preconditions.checkNotNull(domainModule);
      return this;
    }

    public Builder dataModule(DataModule dataModule) {
      this.dataModule = Preconditions.checkNotNull(dataModule);
      return this;
    }

    public AppComponent build() {
      Preconditions.checkBuilderRequirement(appModule, AppModule.class);
      if (domainModule == null) {
        this.domainModule = new DomainModule();
      }
      if (dataModule == null) {
        this.dataModule = new DataModule();
      }
      return new DaggerAppComponent(appModule, domainModule, dataModule);
    }
  }
}
