// Generated by Dagger (https://dagger.dev).
package lolka.example.PsyPath.di;

import android.content.Context;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import lolka.example.PsyPath.data.storage.Service;
import lolka.example.PsyPath.data.storage.database_for_goals.repository.DataBaseRepository;
import lolka.example.PsyPath.data.storage.user_data.PatientData;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DataModule_ProvideServiceFactory implements Factory<Service> {
  private final DataModule module;

  private final Provider<Context> contextProvider;

  private final Provider<DataBaseRepository> dataBaseRepositoryProvider;

  private final Provider<PatientData> patientDataProvider;

  public DataModule_ProvideServiceFactory(DataModule module, Provider<Context> contextProvider,
      Provider<DataBaseRepository> dataBaseRepositoryProvider,
      Provider<PatientData> patientDataProvider) {
    this.module = module;
    this.contextProvider = contextProvider;
    this.dataBaseRepositoryProvider = dataBaseRepositoryProvider;
    this.patientDataProvider = patientDataProvider;
  }

  @Override
  public Service get() {
    return provideService(module, contextProvider.get(), dataBaseRepositoryProvider.get(), patientDataProvider.get());
  }

  public static DataModule_ProvideServiceFactory create(DataModule module,
      Provider<Context> contextProvider, Provider<DataBaseRepository> dataBaseRepositoryProvider,
      Provider<PatientData> patientDataProvider) {
    return new DataModule_ProvideServiceFactory(module, contextProvider, dataBaseRepositoryProvider, patientDataProvider);
  }

  public static Service provideService(DataModule instance, Context context,
      DataBaseRepository dataBaseRepository, PatientData patientData) {
    return Preconditions.checkNotNullFromProvides(instance.provideService(context, dataBaseRepository, patientData));
  }
}
