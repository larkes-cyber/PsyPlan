// Generated by Dagger (https://dagger.dev).
package lolka.example.PsyPath.di;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import lolka.example.PsyPath.data.storage.database_for_goals.AppDatabase;
import lolka.example.PsyPath.data.storage.database_for_goals.dao.TaskDao;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DataModule_ProvideTaskDaoFactory implements Factory<TaskDao> {
  private final DataModule module;

  private final Provider<AppDatabase> databaseProvider;

  public DataModule_ProvideTaskDaoFactory(DataModule module,
      Provider<AppDatabase> databaseProvider) {
    this.module = module;
    this.databaseProvider = databaseProvider;
  }

  @Override
  public TaskDao get() {
    return provideTaskDao(module, databaseProvider.get());
  }

  public static DataModule_ProvideTaskDaoFactory create(DataModule module,
      Provider<AppDatabase> databaseProvider) {
    return new DataModule_ProvideTaskDaoFactory(module, databaseProvider);
  }

  public static TaskDao provideTaskDao(DataModule instance, AppDatabase database) {
    return Preconditions.checkNotNullFromProvides(instance.provideTaskDao(database));
  }
}
