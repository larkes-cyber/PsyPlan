// Generated by Dagger (https://dagger.dev).
package lolka.example.PsyPath.di;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import lolka.example.PsyPath.domain.repository.UserRepository;
import lolka.example.PsyPath.domain.usecase.UseGetPatientDataFromDatabase;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DomainModule_ProvideGetPatientDataFromDatabaseFactory implements Factory<UseGetPatientDataFromDatabase> {
  private final DomainModule module;

  private final Provider<UserRepository> userRepositoryProvider;

  public DomainModule_ProvideGetPatientDataFromDatabaseFactory(DomainModule module,
      Provider<UserRepository> userRepositoryProvider) {
    this.module = module;
    this.userRepositoryProvider = userRepositoryProvider;
  }

  @Override
  public UseGetPatientDataFromDatabase get() {
    return provideGetPatientDataFromDatabase(module, userRepositoryProvider.get());
  }

  public static DomainModule_ProvideGetPatientDataFromDatabaseFactory create(DomainModule module,
      Provider<UserRepository> userRepositoryProvider) {
    return new DomainModule_ProvideGetPatientDataFromDatabaseFactory(module, userRepositoryProvider);
  }

  public static UseGetPatientDataFromDatabase provideGetPatientDataFromDatabase(
      DomainModule instance, UserRepository userRepository) {
    return Preconditions.checkNotNullFromProvides(instance.provideGetPatientDataFromDatabase(userRepository));
  }
}
